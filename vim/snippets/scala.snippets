snippet paqo 
	package object ${1:package} {
		${2://code}	
	}
snippet main
	def main(args:Array[String]) {
		${1:/* code */}
	}
snippet app_
	object ${1:AppName}	extends ${2:Parent} {
		def main(args:Array[String]) {
			${3:/* code */}
		}
	}
snippet appex_
	object ${1:AppName}	extends ${2:Parent} {
		def main(args:Array[String]) {
			${3:/* code */}
		}
	}
snippet cls
	class ${1:ClassName}
snippet clx
	class ${1:ClassName} extends ${2:ParentName}
snippet ob
	object ${1:ObjectName}
snippet obex
	object ${1:ObjectName} extends ${1:ParentName}
snippet ccls
	case class ${1:ClassName}
snippet cclx
	case class ${1:ClassName} extends ${2:ParentName}
snippet cco
	case object ${1:ObjectName}
snippet ccox
	case object ${1:ObjectName} extends ${2:ParentName}
snippet tt
	trait ${1:Trait}
snippet stt
	sealed trait ${1:Trait}
snippet po
	protected
snippet pr
	private
snippet fi
	final
snippet ab
	abstract
snippet cs
	case ${1:Pattern} => ${2} 
snippet pf
	{ case ${1:Pattern} => ${2} }
snippet mat
	${1} match {
		case ${2:Pattern} => ${3}
	}
snippet ty
	try{
		${1}
	} catch {
		case e:${2:Exception} => ${2}
	}
snippet th
	throw 
snippet sy
	synchronized
snippet im
	import
snippet ext
	extends 
snippet j.u
	java.util
snippet j.i
	java.io.
snippet j.b
	java.beans.
snippet j.n
	java.net.
snippet j.m
	java.math.
snippet s.c
	scala.collection
snippet s.c.m
	scala.collection.mutable
snippet s.c.i
	scala.collection.immutable
snippet if
	if (${1}) ${2}
snippet el
	else 
snippet elif
	else if (${1}) ${2}
snippet wh
	while (${1}) ${2}
snippet for
	for (${1:i} <- ${2:Traversable}) 
		${4}
snippet fory
	for (${1:i} <- ${2:Traversable}) yield ${4}
#snippet tc
#	public class ${1:`Filename()`} extends ${2:TestCase}
#snippet t
#	public void test${1:Name}() throws Exception ${2}

snippet cl
	class ${1:`Filename("", "untitled")`} ${2}

