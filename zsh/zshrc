#!/usr/bin/env zsh
# ====================================================
# Unified .zshrc for macOS and Docker
# ====================================================

# Check if we're in the Docker environment
if [[ "$(uname -a)" == *"dockershell"* ]]; then
  # Source Docker-specific configuration
  echo "Dockershell detected, sourcing .zsh_docker"
  [[ -f "$HOME/.zshrc_docker" ]] && source "$HOME/.zshrc_docker"
  return 0  # Exit early to prevent loading the rest of this file
fi

# -------------------------------
# Mac-specific configuration below
# -------------------------------
# Homebrew Config based on Mac architecture
if [[ "$(uname -m)" == "arm64" ]]; then
  export HOMEBREW_PREFIX="/opt/homebrew"
else
  export HOMEBREW_PREFIX="/usr/local"
fi

# Set up PATH
export PATH="$HOME/bin:$HOME/.local/bin:$HOMEBREW_PREFIX/opt/llvm/bin:$HOMEBREW_PREFIX/bin:$PATH"
export PATH="$HOME/.npm-global/bin:$PATH"
export PATH="$HOME/Library/Application Support/Coursier/bin:$PATH"
export PATH="$(brew --prefix)/opt/util-linux/sbin:${PATH}"
export PATH="$(brew --prefix)/opt/util-linux/bin:${PATH}"




# Add Homebrew Zsh completions to fpath
fpath=("$HOMEBREW_PREFIX/share/zsh/site-functions" $fpath)

# -------------------------------
# Initialize Zsh Completion System
# -------------------------------
autoload -Uz compinit && compinit -u

# -------------------------------
# oh-my-zsh Setup
# -------------------------------
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"
plugins=(git fzf tmux 1password git-prompt brew docker)
ZSH_THEME="powerlevel10k/powerlevel10k"
# ZSH_THEME="robbyrussell"
plugins=(fzf tmux 1password brew)
source "$ZSH/oh-my-zsh.sh"

# -------------------------------------------
# Zsh Completions (fixes compinit issue - IMPROVED)
# -------------------------------------------
# Determine Homebrew's site-functions directory dynamically
if [[ -d "$(brew --prefix)/share/zsh/site-functions" ]]; then
    export FPATH="$(brew --prefix)/share/zsh/site-functions:$FPATH"
elif [[ -d "/opt/homebrew/share/zsh/site-functions" ]]; then
    export FPATH="/opt/homebrew/share/zsh/site-functions:$FPATH"
fi

# Safely reload completion without permission issues
autoload -Uz compinit
compinit -u

# -------------------------------------------
# User-specific configuration
# -------------------------------------------
# Preferred editor depending on SSH session
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
# -------------------------------
# User-Specific Configuration
# -------------------------------
# Set preferred editor based on SSH session
if [[ -n "$SSH_CONNECTION" ]]; then
  export EDITOR='vim'
else
    export EDITOR='nvim'
fi

# Source sensitive keys if available
[[ -f "$HOME/.config/keys" ]] && source "$HOME/.config/keys"

# Source local specific stuff
# Source local-specific stuff
if [[ -f "$HOME/.config/source.list" ]]; then
    while read -r file; do
        echo "sourcing $file"
        source "$file"
    done < "$HOME/.config/source.list"
fi

# Source custom aliases if available
[[ -f "$ZSH_CUSTOM/aliases.zsh" ]] && source "$ZSH_CUSTOM/aliases.zsh"

# Initialize zoxide if installed
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

# Initialize SDKMAN if installed
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

print -n '\e[1 q'
